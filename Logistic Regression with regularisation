{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 558,
   "id": "81be5b75",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to /home/sneha/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import nltk\n",
    "import re\n",
    "nltk.download('stopwords')\n",
    "from nltk.corpus import stopwords\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn import preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b2da725",
   "metadata": {},
   "source": [
    "# read text file to a data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 559,
   "id": "127464d8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Review</th>\n",
       "      <th>Labels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Ill put this gem up against any movie in terms...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Its practically perfect in all of them  true m...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>The structure of this film is easily the most...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>I can think of no other film where something v...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>In other words the content level of this film ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>How can anyone in their right mind ask for any...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Its quite simply the highest most superlative ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Yes this film does require a rather significan...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>This short film certainly pulls no punches</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               Review  Labels\n",
       "17  Ill put this gem up against any movie in terms...       1\n",
       "18  Its practically perfect in all of them  true m...       1\n",
       "19   The structure of this film is easily the most...       1\n",
       "20  I can think of no other film where something v...       1\n",
       "21  In other words the content level of this film ...       1\n",
       "22  How can anyone in their right mind ask for any...       1\n",
       "23  Its quite simply the highest most superlative ...       1\n",
       "24  Yes this film does require a rather significan...       1\n",
       "25       This short film certainly pulls no punches         0"
      ]
     },
     "execution_count": 559,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('movieReviews1000.txt', delimiter='\\t', quoting=csv.QUOTE_NONNUMERIC, header = None, names=['Review','Labels'])\n",
    "df['Labels'] = df['Labels'].apply(np.int32)\n",
    "df[17:26]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4fde980",
   "metadata": {},
   "source": [
    "# TFIDF applied on the input data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 560,
   "id": "92b7850c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def tfidf(train,test):                                        \n",
    "        tf_idf = TfidfVectorizer()\n",
    "        X_train_mat = (tf_idf.fit_transform(train)).toarray()\n",
    "        X_test_mat = (tf_idf.transform(test)).toarray()\n",
    "\n",
    "        return X_train_mat,X_test_mat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a8b9d58",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e9e5a420",
   "metadata": {},
   "source": [
    "# removal of label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 561,
   "id": "3514f489",
   "metadata": {},
   "outputs": [],
   "source": [
    "reviews = df['Review']\n",
    "labels = df['Labels']\n",
    "\n",
    "train_Xr= reviews.head(700)\n",
    "train_Yr = labels.head(700)\n",
    "\n",
    "test_Xr = reviews.tail(300)\n",
    "test_Yr = labels.tail(300)\n",
    "\n",
    "\n",
    "train_X,test_X=tfidf(train_Xr,test_Xr) \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e009b75",
   "metadata": {},
   "source": [
    "# PCA dimention reduction to 30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 562,
   "id": "cb6c38da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(700, 30)\n"
     ]
    }
   ],
   "source": [
    "train_X=StandardScaler().fit_transform(train_X)\n",
    "test_X=StandardScaler().fit_transform(test_X)\n",
    "pca = PCA(n_components=30)\n",
    "\n",
    "pca.fit(train_X)\n",
    "\n",
    "train_Pca= pca.transform(train_X)\n",
    "\n",
    "\n",
    "train_Pca = preprocessing.normalize(train_Pca)\n",
    "test_Pca= pca.transform(test_X)\n",
    "\n",
    "\n",
    "test_Pca = preprocessing.normalize(test_Pca)\n",
    "print(train_Pca.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3095d39",
   "metadata": {},
   "source": [
    "# plotting the training data of 2 classes in different colors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 563,
   "id": "a60076cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 8))\n",
    "for i in range(2):\n",
    "    plt.scatter(train_Pca[:, 0][train_Yr == i], train_Pca[:, 1][train_Yr == i], s=12, label='label - '+str(i))\n",
    "plt.xlabel('PC-1')\n",
    "plt.ylabel('PC-2')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8eebd76",
   "metadata": {},
   "source": [
    "# Splitting training data in training and cross validation data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 564,
   "id": "8e7411d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "train_X = train_Pca[:500, :]\n",
    "train_Y = np.array(train_Yr[:500])\n",
    "train_Y=train_Y.reshape(-1,1)\n",
    "test_Y=np.array(test_Yr)\n",
    "\n",
    "CV_X = train_Pca[500:700, :]\n",
    "CV_Y = np.array(train_Yr[500:700])\n",
    "CV_Y=CV_Y.reshape(-1,1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d823b129",
   "metadata": {},
   "source": [
    "# Loss Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 565,
   "id": "a7e551d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cost_fun(theta,X,y):\n",
    "    N=len(y)\n",
    "    z = np.dot(X,theta)\n",
    "    cost0 = np.dot(y.T,np.log(sigmoid(z)))\n",
    "    cost1 = np.dot((1-y).T,np.log(1-sigmoid(z)))\n",
    "    \n",
    "    cost = -((cost1 + cost0))/N\n",
    "   \n",
    "    return cost\n",
    "                            \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d20ae92",
   "metadata": {},
   "source": [
    "# sigmoid function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 566,
   "id": "adb38aa1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid(z):\n",
    "    sig = 1/(1+np.exp(-z))\n",
    "    return sig"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9323ee4",
   "metadata": {},
   "source": [
    "# predicting clases for input data points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 567,
   "id": "16655b3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def prediction(X,theta):\n",
    "    z = np.dot(X,theta)\n",
    "    \n",
    "    N=len(X)\n",
    "    lis = np.zeros((N,))\n",
    "    t=0\n",
    "    \n",
    "    for i in sigmoid(z):\n",
    "        if i>0.5:\n",
    "            lis[t]=1\n",
    "        else:\n",
    "            lis[t]=0\n",
    "        t+=1    \n",
    "    return lis\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f9720c2",
   "metadata": {},
   "source": [
    "# Minibatch Gradient Descent "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 568,
   "id": "84ef189c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def minibatch_gradient_descent(X,y,X_cv,Y_cv,theta,learning_rate, iterations, batch_size,Lambda=0.0 ):\n",
    "    m = len(y)\n",
    "    cost_history_train = np.zeros(iterations)\n",
    "    cost_history_CV=np.zeros(iterations)\n",
    "    n_batches = int(m/batch_size)\n",
    "    i=0\n",
    "    for it in range(iterations):\n",
    "        cost=0.0\n",
    "        \n",
    "        indices = np.random.permutation(m)\n",
    "\n",
    "        \n",
    "        for i in range(0,m,batch_size):\n",
    "            X_i = X[i:i+batch_size]\n",
    "            \n",
    "            y_i = y[i:i+batch_size]\n",
    "            X_i = np.c_[np.ones(len(X_i)),X_i]\n",
    "           \n",
    "            prediction = np.dot(X_i,theta)\n",
    "            theta = theta -(1/m)*learning_rate*((np.dot( X_i.T,(sigmoid(prediction)- y_i)))+Lambda*theta)\n",
    "            \n",
    "            cost += cost_fun(theta,X_i,y_i)\n",
    "        \n",
    "        cost_history_train[it]  = cost\n",
    "        X_=np.c_[np.ones(len(X_cv)),X_cv]\n",
    "        cost_history_CV[it]=cost_fun(theta,X_,Y_cv)\n",
    "    return theta, cost_history_train,cost_history_CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 601,
   "id": "94fe4e39",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_graph(n_iter,cost_array,color,n=1):\n",
    "        fig, ax = plt.subplots(figsize=(10/n, 8/n))\n",
    "        ax.set_ylabel(\"{J(Theta)}\", rotation=0)\n",
    "        ax.set_xlabel(\"{Iterations}\")\n",
    "\n",
    "        _ = ax.plot(range(n_iter), cost_array, color, linewidth = \"4\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27ba7ac0",
   "metadata": {},
   "source": [
    "# For each learning rate \n",
    "(Change Learning Rate to see comparision)\n",
    "## change batch size to see results for each learning rate "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 594,
   "id": "a8836a11",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = 0.1  \n",
    "batch_size=32 \n",
    "theta = np.random.randn(31, 1)\n",
    "thetaF,cost_train,cost_CV = minibatch_gradient_descent(train_X,train_Y,CV_X,CV_Y,theta,lr,n_iter,batch_size)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9f06a87",
   "metadata": {},
   "source": [
    "# Train Data: Plot of decreasing Loss function with each iteration "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 595,
   "id": "deb47793",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_graph(n_iter,cost_train,'b')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0caae36f",
   "metadata": {},
   "source": [
    "# Cross validation data: plot of decreasing loss function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 596,
   "id": "eeef510f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_graph(n_iter,cost_CV,'r')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26329974",
   "metadata": {},
   "source": [
    "# Accuracy on test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 597,
   "id": "ce88dcb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Accuracy_fun(X,Y,thetaF):\n",
    "    X = np.c_[np.ones(len(X)),X]\n",
    "    Ypred=prediction(X,thetaF)\n",
    "\n",
    "    N=len(X)\n",
    "    count=0\n",
    "    for i in range(N):\n",
    "        if(int(Ypred[i])==Y[i]):\n",
    "            count+=1\n",
    "    print(\"Accuracy at batch size= \", batch_size,\" and learning rate=\",lr,\" is= \",(count/N)*100)    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 598,
   "id": "41faa51f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy at batch size=  32  and learning rate= 0.1  is=  55.00000000000001\n"
     ]
    }
   ],
   "source": [
    "Accuracy_fun(test_Pca,test_Y,thetaF)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "845c91c8",
   "metadata": {},
   "source": [
    "# Logistic regression with L2 regularisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 599,
   "id": "ebffab8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = 0.1  #optimal learning rate is set\n",
    "batch_size=32#optimal batch size is set\n",
    "theta = np.random.randn(31, 1)\n",
    "L1=0.1  #Change regularisation coefficient\n",
    "theta1,cost_train1,cost_CV1= minibatch_gradient_descent(train_X,train_Y,CV_X,CV_Y,theta,lr,n_iter,batch_size,L1)\n",
    "\n",
    "\n",
    "lr = 0.1  #optimal learning rate is set\n",
    "batch_size=32#optimal batch size is set\n",
    "theta = np.random.randn(31, 1)\n",
    "L2=0.01  #Change regularisation coefficient\n",
    "theta2,cost_train2,cost_CV2 = minibatch_gradient_descent(train_X,train_Y,CV_X,CV_Y,theta,lr,n_iter,batch_size,L2)\n",
    "\n",
    "\n",
    "lr = 0.1  #optimal learning rate is set\n",
    "batch_size=32#optimal batch size is set\n",
    "theta = np.random.randn(31, 1)\n",
    "L3=0.001  #Change regularisation coefficient\n",
    "theta3,cost_train3,cost_CV3 = minibatch_gradient_descent(train_X,train_Y,CV_X,CV_Y,theta,lr,n_iter,batch_size,L3)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18ef8c81",
   "metadata": {},
   "source": [
    "# Loss function on Train data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb0b9c1b",
   "metadata": {},
   "source": [
    "### for regularisation coeff 0.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 602,
   "id": "d0eb1253",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_graph(n_iter,cost_train1,'g',2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46dfc5ff",
   "metadata": {},
   "source": [
    "### for regularisation coeff 0.01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 603,
   "id": "08ecaf95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_graph(n_iter,cost_train2,'m',2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d525d68",
   "metadata": {},
   "source": [
    "### for regularisation coeff 0.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 605,
   "id": "7d0f8b90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_graph(n_iter,cost_train3,'c',2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e97dda2",
   "metadata": {},
   "source": [
    "# Testin accuracy of train,test,and CV on a regularisation coefficient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "534ff141",
   "metadata": {},
   "outputs": [],
   "source": [
    "### for regularisation coeff 0.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 552,
   "id": "77eaab76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "at regularisation coefficient  0.1\n",
      "on training data\n",
      "Accuracy at batch size=  32  and learning rate= 0.1  is=  52.800000000000004\n",
      "on Cross-Validation data\n",
      "Accuracy at batch size=  32  and learning rate= 0.1  is=  53.5\n",
      "on test data\n",
      "Accuracy at batch size=  32  and learning rate= 0.1  is=  45.666666666666664\n"
     ]
    }
   ],
   "source": [
    "print(\"at regularisation coefficient \",L)\n",
    "#Accuracy on train data\n",
    "print(\"on training data\")\n",
    "Accuracy_fun(train_X,train_Y,thetaF)\n",
    "print(\"on Cross-Validation data\")\n",
    "Accuracy_fun(CV_X,CV_Y,thetaF)\n",
    "print(\"on test data\")\n",
    "#Accuracy on test data\n",
    "Accuracy_fun(test_Pca,test_Y,thetaF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cc70486",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"at regularisation coefficient \",L)\n",
    "#Accuracy on train data\n",
    "print(\"on training data\")\n",
    "Accuracy_fun(train_X,train_Y,thetaF)\n",
    "print(\"on Cross-Validation data\")\n",
    "Accuracy_fun(CV_X,CV_Y,thetaF)\n",
    "print(\"on test data\")\n",
    "#Accuracy on test data\n",
    "Accuracy_fun(test_Pca,test_Y,thetaF)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "887418a5",
   "metadata": {},
   "source": [
    "# observation 1\n",
    "\n",
    "## For each learning rate in {0.1,0.01,0.001}, on changing the batch size we got\n",
    "\n",
    "### note: we are asked to set epoch=20, but loss function takes mores than 200 epoch for conversion\n",
    "\n",
    "Accuracy at batch size=  32  and learning rate= 0.001  is=  46.33333333333333  <br>\n",
    "Accuracy at batch size=  64  and learning rate= 0.001  is=  43.0  <br>\n",
    "Accuracy at batch size=  128  and learning rate= 0.001  is=  45.33333333333333  <br>\n",
    "\n",
    "\n",
    "\n",
    "Accuracy at batch size=  32  and learning rate= 0.01  is=  57.99999999999999  <br>\n",
    "Accuracy at batch size=  64  and learning rate= 0.01  is=  57.99999999999999  <br>\n",
    "Accuracy at batch size=  128  and learning rate= 0.01  is=  52.0  <br>\n",
    "\n",
    "Accuracy at batch size=  32  and learning rate= 0.1  is=  49.666666666666664  <br>\n",
    "Accuracy at batch size=  32  and learning rate= 0.1  is=  47.678888888866664 <br>\n",
    "Accuracy at batch size=  128  and learning rate= 0.1  is=  45.33333333333333  <br>\n",
    "\n",
    "Note: these observations are not consistent and keep fluctuating, all values <br>\n",
    "are giving accuracy in range of 45% to 55%"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1274c07e",
   "metadata": {},
   "source": [
    " # Observation2\n",
    "    \n",
    "changing the regularisation parameter Lambda, we test the accuracy on both train data and test data <br>\n",
    "##  if high training error and high cross validation error then under fit\n",
    "## if low training error and high cross validation error then overfit fit\n",
    "\n",
    " note:none of the regularisation coeeficient is giving very high or very low error on CV or train data <br> \n",
    "    hence cant say anything about the underfitting or over fitting <br>\n",
    "\n",
    "at regularisation coefficient  0.1  <br>\n",
    "on training data  <br>\n",
    "Accuracy at batch size=  32  and learning rate= 0.1  is=  52.800000000000004  <br>\n",
    "on Cross-Validation data\n",
    "Accuracy at batch size=  32  and learning rate= 0.1  is=  53.5\n",
    "on test data  <br>\n",
    "Accuracy at batch size=  32  and learning rate= 0.1  is=  45.666666666666664  <br>\n",
    "\n",
    "\n",
    "at regularisation coefficient  0.01  <br>\n",
    "on training data  <br>\n",
    "Accuracy at batch size=  32  and learning rate= 0.1  is=  49.6  <br>\n",
    "on Cross-Validation data  <br>\n",
    "Accuracy at batch size=  32  and learning rate= 0.1  is=  48.0  <br>\n",
    "on test data  <br>\n",
    "Accuracy at batch size=  32  and learning rate= 0.1  is=  48.66666666666667  <br>\n",
    "\n",
    "\n",
    "at regularisation coefficient  0.001  <br>\n",
    "on training data  <br>\n",
    "Accuracy at batch size=  32  and learning rate= 0.1  is=  44.800000000000004  <br>\n",
    "on Cross-Validation data  <br>\n",
    "Accuracy at batch size=  32  and learning rate= 0.1  is=  47.0  <br>\n",
    "on test data  <br>\n",
    "Accuracy at batch size=  32  and learning rate= 0.1  is=  49.666666666666664  <br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "892bdec5",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "169caa65",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "470b7e20",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45f50841",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
